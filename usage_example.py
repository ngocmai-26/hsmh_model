#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
USAGE EXAMPLE - V√≠ d·ª• s·ª≠ d·ª•ng model_loader.py
"""

from model_loader import ModelLoader, ClassAnalyzer, IndividualAnalyzer, PredictionTools


# ============================================================================
# V√ç D·ª§ 1: Load model tr·ª±c ti·∫øp v√† s·ª≠ d·ª•ng
# ============================================================================
def example_1_basic_load():
    """V√≠ d·ª• 1: Load model c∆° b·∫£n"""
    print("=" * 80)
    print("V√ç D·ª§ 1: LOAD MODEL C∆† B·∫¢N")
    print("=" * 80)
    
    # B∆∞·ªõc 1: T·∫°o ModelLoader
    loader = ModelLoader()
    
    # B∆∞·ªõc 2: Load model t·ª´ file pickle
    if loader.load():
        print("\n‚úÖ Model ƒë√£ load xong, c√≥ th·ªÉ s·ª≠ d·ª•ng!")
        
        # B∆∞·ªõc 3: S·ª≠ d·ª•ng model ƒë·ªÉ d·ª± ƒëo√°n
        result = loader.predict_reason_solution(
            dataset_key='clo_attendance',
            features=[0.6],  # ƒêi·ªÉm CLO = 0.6 (normalized)
            top_k=3
        )
        
        if result:
            print(f"\nüìä K·∫øt qu·∫£ d·ª± ƒëo√°n:")
            print(f"   Dataset: {result['dataset']}")
            print(f"   M·ª©c ƒë·ªô: {result['severity_level']}")
            print(f"   S·ªë reasons: {len(result['results'])}")


# ============================================================================
# V√ç D·ª§ 2: Ph√¢n t√≠ch l·ªõp h·ªçc (ƒë∆°n gi·∫£n nh·∫•t)
# ============================================================================
def example_2_analyze_class_simple():
    """V√≠ d·ª• 2: Ph√¢n t√≠ch l·ªõp - ƒë∆°n gi·∫£n"""
    print("\n" + "=" * 80)
    print("V√ç D·ª§ 2: PH√ÇN T√çCH L·ªöP H·ªåC (ƒê∆†N GI·∫¢N)")
    print("=" * 80)
    
    # Kh·ªüi t·∫°o analyzer (t·ª± ƒë·ªông load model)
    analyzer = ClassAnalyzer()
    
    # Ph√¢n t√≠ch l·ªõp
    analyzer.analyze(
        subject_id="INF1383",
        lecturer_name="Nguy·ªÖn VƒÉn A",
        student_list=["SV001", "SV002", "SV003"],
        scores=[5.5, 4.0, 2.5],
        top_k=2,
        display=True
    )


# ============================================================================
# V√ç D·ª§ 3: Ph√¢n t√≠ch l·ªõp h·ªçc (l·∫•y k·∫øt qu·∫£ v·ªÅ x·ª≠ l√Ω)
# ============================================================================
def example_3_analyze_class_with_result():
    """V√≠ d·ª• 3: Ph√¢n t√≠ch l·ªõp - l·∫•y k·∫øt qu·∫£"""
    print("\n" + "=" * 80)
    print("V√ç D·ª§ 3: PH√ÇN T√çCH L·ªöP - L·∫§Y K·∫æT QU·∫¢")
    print("=" * 80)
    
    analyzer = ClassAnalyzer()
    
    # Ph√¢n t√≠ch (kh√¥ng display, l·∫•y k·∫øt qu·∫£ v·ªÅ)
    result = analyzer.analyze(
        subject_id="INF1383",
        lecturer_name="Nguy·ªÖn VƒÉn A",
        student_list=["SV001", "SV002", "SV003", "SV004", "SV005"],
        scores=[5.5, 4.8, 3.2, 2.5, 4.5],
        top_k=3,
        display=False  # Kh√¥ng hi·ªÉn th·ªã, ch·ªâ l·∫•y k·∫øt qu·∫£
    )
    
    # X·ª≠ l√Ω k·∫øt qu·∫£
    if result:
        print(f"üìä Th·ªëng k√™ l·ªõp:")
        print(f"   - T·ªïng SV: {result['statistics']['total_students']}")
        print(f"   - ƒêi·ªÉm TB: {result['statistics']['average_score']:.2f}")
        print(f"   - T·ªâ l·ªá ƒë·∫°t: {result['statistics']['pass_rate']:.1f}%")
        
        print(f"\n‚ö†Ô∏è  Sinh vi√™n c·∫ßn can thi·ªáp: {len(result['students_need_attention'])}")
        for student in result['students_need_attention']:
            print(f"   ‚Ä¢ {student['student_id']}: {student['clo_score']:.2f}/6")
        
        print(f"\nüí° Reasons & Solutions:")
        if result['class_general_analysis']:
            for i, item in enumerate(result['class_general_analysis']['results'], 1):
                print(f"   {i}. {item['reason'][:60]}...")


# ============================================================================
# V√ç D·ª§ 4: Ph√¢n t√≠ch c√° nh√¢n
# ============================================================================
def example_4_analyze_individual():
    """V√≠ d·ª• 4: Ph√¢n t√≠ch c√° nh√¢n"""
    print("\n" + "=" * 80)
    print("V√ç D·ª§ 4: PH√ÇN T√çCH C√Å NH√ÇN")
    print("=" * 80)
    
    analyzer = IndividualAnalyzer()
    
    # Ph√¢n t√≠ch 1 sinh vi√™n
    result = analyzer.analyze(
        subject_id="INF1383",
        lecturer_name="Nguy·ªÖn VƒÉn A",
        student_id="SV001",
        clo_score=3.5,
        top_k=5,
        display=True
    )


# ============================================================================
# V√ç D·ª§ 5: S·ª≠ d·ª•ng PredictionTools
# ============================================================================
def example_5_prediction_tools():
    """V√≠ d·ª• 5: S·ª≠ d·ª•ng PredictionTools"""
    print("\n" + "=" * 80)
    print("V√ç D·ª§ 5: PREDICTION TOOLS")
    print("=" * 80)
    
    # Kh·ªüi t·∫°o tools
    tools = PredictionTools()
    
    # 1. D·ª± ƒëo√°n Teaching Methods
    print("\n1Ô∏è‚É£ Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y:")
    tm = tools.predict_teaching_methods(0.6, top_k=2)
    if tm:
        print(f"   M·ª©c ƒë·ªô: {tm['severity_level']}")
        print(f"   Reasons: {len(tm['results'])}")
    
    # 2. D·ª± ƒëo√°n Evaluation Methods
    print("\n2Ô∏è‚É£ Ph∆∞∆°ng ph√°p ƒë√°nh gi√°:")
    em = tools.predict_evaluation_methods(0.5, top_k=2)
    if em:
        print(f"   M·ª©c ƒë·ªô: {em['severity_level']}")
        print(f"   Reasons: {len(em['results'])}")
    
    # 3. D·ª± ƒëo√°n CLO
    print("\n3Ô∏è‚É£ CLO Attendance:")
    clo = tools.predict_clo_attendance(0.75, top_k=2)
    if clo:
        print(f"   M·ª©c ƒë·ªô: {clo['severity_level']}")
        for i, item in enumerate(clo['results'], 1):
            print(f"   {i}. {item['reason'][:70]}...")


# ============================================================================
# V√ç D·ª§ 6: Load model t·ª´ path c·ª• th·ªÉ
# ============================================================================
def example_6_custom_model_path():
    """V√≠ d·ª• 6: Load model t·ª´ ƒë∆∞·ªùng d·∫´n c·ª• th·ªÉ"""
    print("\n" + "=" * 80)
    print("V√ç D·ª§ 6: LOAD MODEL T·ª™ PATH C·ª§ TH·ªÇ")
    print("=" * 80)
    
    # Load model t·ª´ path c·ª• th·ªÉ
    loader = ModelLoader("trained_models/individual_model/individual_model.pkl")
    
    if loader.load():
        print("\n‚úÖ ƒê√£ load individual model!")
        
        # S·ª≠ d·ª•ng model
        result = loader.predict_reason_solution('clo_attendance', [0.5], top_k=2)
        if result:
            print(f"   Severity: {result['severity_level']}")


# ============================================================================
# MAIN
# ============================================================================
def main():
    """Ch·∫°y t·∫•t c·∫£ v√≠ d·ª•"""
    print("\n" + "üéØ" * 40)
    print("USAGE EXAMPLES - H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG MODEL_LOADER")
    print("üéØ" * 40)
    
    print("\nüìö C√°c v√≠ d·ª•:")
    print("   1. Load model c∆° b·∫£n")
    print("   2. Ph√¢n t√≠ch l·ªõp h·ªçc (ƒë∆°n gi·∫£n)")
    print("   3. Ph√¢n t√≠ch l·ªõp (l·∫•y k·∫øt qu·∫£)")
    print("   4. Ph√¢n t√≠ch c√° nh√¢n")
    print("   5. Prediction tools")
    print("   6. Load model t·ª´ path c·ª• th·ªÉ")
    
    try:
        example_1_basic_load()
        example_2_analyze_class_simple()
        example_3_analyze_class_with_result()
        example_4_analyze_individual()
        example_5_prediction_tools()
        example_6_custom_model_path()
        
        print("\n" + "=" * 80)
        print("‚úÖ T·∫§T C·∫¢ V√ç D·ª§ HO√ÄN TH√ÄNH!")
        print("=" * 80)
        
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()

